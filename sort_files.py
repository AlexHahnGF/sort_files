import logging
from logging import FileHandler
from logging import Formatter
import os
import shutil
from tqdm import tqdm
import datetime

# global constants
# KEYWORDS = ["zeugniss", "xml", "xlsx"]
DEBUG = False

# set the logger settings
FULL_LOG_FILE = "full_log.txt"
ERROR_LOG_FILE = "error_log.txt"
LOG_FORMAT = ('%(asctime)s [%(levelname)s] - %(message)s')

error_log = logging.getLogger("error_log")
error_log.setLevel(logging.ERROR)
error_log_handler = FileHandler(ERROR_LOG_FILE)
error_log_handler.setLevel(logging.ERROR)
error_log_handler.setFormatter(Formatter(LOG_FORMAT))
error_log.addHandler(error_log_handler)



def get_all_files(path: str)-> dict:
    """
    get all files in dirs by the path given as path: str
    forms and return a dict in form {folder:[files]}
    """
    print(f'{str(datetime.datetime.now())}: Suche nach Ordnern... ')
    files_dict = {}
    folders = [ f.path for f in os.scandir(os.path.join(os.getcwd(),path)) if f.is_dir() ]
    for folder in tqdm(folders, desc="Suchen nach Datein in Ordnern"):
    # for folder in folders:
        files_dict[folder] = [ f.path for f in os.scandir(folder) if f.is_file() ]
    return files_dict



def generate_userdefined_keywords()->dict:
    """
    creates dict with folder:[keywords], defined by the user
    to sort files according this dict further
    """
    keywords_dict = {}
    end_input = False
    while not end_input:
        folder = input("Bitte geben Sie den Namen des Ordners ohne Leer- und Soner-zeichen ein: ")
        folder = folder.replace(" ",'')
        print(f"Bitte geben Sie Schlüsselwörter für den angegebenen Ordner ohne Leerzeichen und mit Komma getrennt ein\n" +
        "z.B: keyword1,keyword2,keyword3")
        user_input = input("Keywords: ")
        user_keywords = user_input.replace(" ","").split(",")
        user_keywords = list(filter(lambda x: x != '', user_keywords))
        keywords_dict.update({folder:user_keywords})
        print(f"Ordner: {folder} mit Schlüsselwörter {user_keywords} added")
        end = str(input("einen weiteren Ordner erstellen?(y\\n)?: ").lower())
        while end!="y" and end!="n":
            end = str(input(f"Die eingabe '{end}' ist nicht erkannt. Bitte geben Sie 'y' oder 'n' ein: ")).lower()
        if end == "n":
            end_input = True
    print("Folgende Ordner werden erstellt:")
    [print(f"Ordner:{k}, Schlüsselwörter für den Ordner:{v}") for k,v in keywords_dict.items()]
    input("Drücken Sie die Eingabetaste, um fortzufahren oder strg+C um das Script abzubrechen.")
    return keywords_dict



def categorize_files(folders: dict, keywords: dict) -> list:
    """
    categorize files by the given keywords in KEYWORDS list
    get the dict formed with get_all_files func as argument
    files without matches in names will get 'nicht_zugewiesen' category
    returs a list of dicts in form {"category":category, "file":file, "folder":folder, "user":username, "filename":filename}
    """
    if DEBUG:
        [print(k,v) for k,v in folders.items()]
    categorized_lsit = []
    print(f"{str(datetime.datetime.now())}: Dateisortierung...")
    for folder, files in tqdm(folders.items(), desc=f"Bearbeitete Ordner"):
        if files:
            for file in files:
                category = create_category(file=file, keywords=keywords)
                if category == 'nicht_zugewiesen':
                    error_log.error(f'Datei: "{file}" kann nicht zugewiesen werden!')
                filename = os.path.basename(file)
                username = os.path.basename(folder)
                categorized_lsit.append({"category":category, "file":file, "folder":folder, "user":username, "filename":filename})
        else:
            error_log.error(f'Ordner: {folder} enthält keine Dateien')
    return categorized_lsit



def create_category(file: str, keywords: dict) -> str:
    """
    form category for a file based on keywords generated by user 
    with generate_userdefined_keywords method
    """
    filename = os.path.basename(file)
    category = "nicht_zugewiesen"
    for folder, keywords_list in keywords.items():
        for entry in keywords_list:
            if entry.lower() in filename.lower():
                category = folder
    return category



def replace_files(files: list, new_path: str) -> None:
    """
    cretes folders in new given path with the same name as before,
    then creates a new folder for each found category and then
    copy the files into the folder with corresponding category
    takes list formed with categorize_files method and a new path
    """
    if DEBUG:
        [print(x) for x in files]
    print(f"{str(datetime.datetime.now())}: Kopieren von Dateien...")
    for item in tqdm(files, desc="Dateien"):
        existing_files = []
        new_folder = os.path.join(new_path, item['user'])
        new_category_folder = os.path.join(new_path, new_folder, item['category'])
        new_filepath = os.path.join(new_path, new_folder, new_category_folder, item['filename'])
        
        if not os.path.exists(new_folder):
            os.makedirs(new_folder)
        if os.path.exists(new_category_folder):
            existing_files = [ f.path for f in os.scandir(new_category_folder) if f.is_file() ]
        else:
            os.makedirs(new_category_folder)
            
        same_name = True
        if DEBUG:
            print(existing_files)
        while same_name:
            if DEBUG:
                print(f'new_fp: {new_filepath}')
            if new_filepath in existing_files:
                new_filepath = f"{new_filepath.rsplit('.', 1)[0]} Kopie.{new_filepath.rsplit('.', 1)[1]}"
            else:
                same_name = False
        shutil.copyfile(item['file'], new_filepath)



# main method of the script
def main():
    keywords = generate_userdefined_keywords()
    files = categorize_files(folders=get_all_files("old_location"), keywords=keywords)
    # create result folder to place files into
    curr_path = os.path.join(os.getcwd(), "00-bearbeitet")
    if not os.path.exists(curr_path):
        os.makedirs(curr_path)
    replace_files(files, str(curr_path))
    print(f"{str(datetime.datetime.now())}: Erfolg! Alle Datein sind Sortiert")
    input(f"Zum Beenden eine belibige Taste eingeben: ")



if __name__ == '__main__':
    main()